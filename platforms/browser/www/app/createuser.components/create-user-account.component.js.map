{"version":3,"file":"create-user-account.component.js","sourceRoot":"","sources":["create-user-account.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAsD,eAAe,CAAC,CAAA;AACtE,uBAA6D,iBAAiB,CAAC,CAAA;AAE/E,sCAAmC,0BAA0B,CAAC,CAAA;AAC9D,2BAA8B,uBAAuB,CAAC,CAAA;AAYtD;IAOI,oCAAoB,GAAe,EAAU,YAAkC,EAAS,MAAqB;QAAzF,QAAG,GAAH,GAAG,CAAY;QAAU,iBAAY,GAAZ,YAAY,CAAsB;QAAS,WAAM,GAAN,MAAM,CAAe;QANnG,+BAA0B,GAAG,IAAI,mBAAY,EAAE,CAAC;QAG1D,UAAK,GAAG,KAAK,CAAC;QACd,iBAAY,GAAG,EAAE,CAAC;IAE8F,CAAC;IAEjH,oDAAe,GAAf;QACI;yGACiG;QACjG,IAAI,IAAI,GAAG,yCAAyC,CAAC;QACrD,IAAI,IAAI,GAAG,wJAAwJ,CAAC;QAEpK,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;YACjE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,QAAQ,CAAC,CAAC;QAC3D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qDAAqD,EAAE,QAAQ,CAAC,CAAC;QACvF,CAAC;QAAC,IAAI,CAAC,EAAE,CAAA,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YACjD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6FAA6F,EAAE,QAAQ,CAAC,CAAC;QAC/H,CAAC;QAAC,IAAI,CAAC,CAAC;YAEJ,IAAI,IAAI,GAAG,IAAI,CAAC;YAChB,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAEvD,UAAU,CAAC;gBACP,EAAE,CAAA,CAAC,IAAI,CAAC,YAAY,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAC;oBAC7C,IAAI,CAAC,0BAA0B,EAAE,CAAC;gBACtC,CAAC;YACL,CAAC,EAAE,IAAI,CAAC,CAAC;QACb,CAAC;IACL,CAAC;IAED,6CAAQ,GAAR;QACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;YACzB,KAAK,EAAE,CAAC,EAAE,EAAE,mBAAU,CAAC,QAAQ,CAAC;YAChC,QAAQ,EAAE,CAAC,EAAE,EAAE,mBAAU,CAAC,QAAQ,CAAC;YACnC,eAAe,EAAC,CAAC,EAAE,EAAE,mBAAU,CAAC,QAAQ,CAAC;SAC5C,CAAC,CAAC;IACP,CAAC;IAED,+DAA0B,GAA1B;QACI,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC7C,CAAC;IA3CD;QAAC,aAAM,EAAE;;kFAAA;IAXb;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,qBAAqB;YAC/B,WAAW,EAAE,oCAAoC;YACjD,SAAS,EAAE,CAAC,mCAAmC,CAAC;YAChD,UAAU,EAAE,EAAE;YACd,KAAK,EAAE,EAAE;YACT,SAAS,EAAE,CAAC,0BAAa,CAAC;SAC3B,CAAC;;kCAAA;IA+CF,iCAAC;AAAD,CAAC,AA7CD,IA6CC;AA7CY,kCAA0B,6BA6CtC,CAAA","sourcesContent":["import {Component, OnInit, EventEmitter, Output} from \"@angular/core\";\nimport {FormBuilder, ControlGroup, Validators, Control} from \"@angular/common\";\nimport {RouteConfig, ROUTER_DIRECTIVES, ROUTER_PROVIDERS} from '@angular/router-deprecated';\nimport {AuthorizationService} from \"../authorization.service\";\nimport { ToastsManager } from 'ng2-toastr/ng2-toastr';\n\n@Component({\n  moduleId: module.id,\n  selector: 'create-user-account',\n  templateUrl: 'create-user-account.component.html',\n  styleUrls: ['create-user-account.component.css'],\n  directives: [],\n  pipes: [],\n  providers: [ToastsManager]\n})\n\nexport class CreateUserAccountComponent implements OnInit {\n    @Output() emitLoginUserAccountWindow = new EventEmitter();\n    \n    myForm:ControlGroup;\n    error = false;\n    errorMessage = '';\n\n    constructor(private _fb:FormBuilder, private _authService: AuthorizationService, public toastr: ToastsManager) {}\n\n    onCreateAccount() {\n        /* Password matching expression. Password must be at least 8 characters, no more than 20 characters, \n        and must include at least one upper case letter, one lower case letter, and one numeric digit. */\n        var re_1 = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,20}$/;\n        var re_2 = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        \n        if(this.myForm.value.password != this.myForm.value.confirmPassword) {\n            this.toastr.error('Passwords do not match!', \"Error!\");\n        } else if(!re_2.test(this.myForm.value.email)) {\n            this.toastr.error('You must enter a valid email address as a username!', 'Error!');\n        } else if(!(re_1.test(this.myForm.value.password))) {\n            this.toastr.error('Password must be between 8 and 20 characters, contain one upper case letter and one number!', \"Error!\");            \n        } else {\n\n            var that = this;\n            this._authService.createUserAccount(that.myForm.value);\n\n            setTimeout(function() {\n                if(that._authService.returnCreateUserSucceed()) {\n                    that.switchBackToLoginComponent();\n                }\n            }, 1500);         \n        }\n    }\n    \n    ngOnInit():any {\n        this.myForm = this._fb.group({\n            email: ['', Validators.required],\n            password: ['', Validators.required],\n            confirmPassword:['', Validators.required],\n        });\n    }\n    \n    switchBackToLoginComponent() {\n        this.emitLoginUserAccountWindow.emit('');\n    }\n}"]}